//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/SkyForgeForUnity/SkyForge/Services/ConsoleService/Scripts/Input/NewInputSystem/ConsoleInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SkyForge.Services.ConsoleService
{
    public partial class @ConsoleInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ConsoleInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConsoleInput"",
    ""maps"": [
        {
            ""name"": ""ConsoleService"",
            ""id"": ""731c63ec-6dd5-4eca-bfed-e2f0863ab042"",
            ""actions"": [
                {
                    ""name"": ""OpenConsole"",
                    ""type"": ""Button"",
                    ""id"": ""836a7b6f-bcdd-4acd-86d3-55c6a59972c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b097df0-1dd2-4a52-92a5-11e9c6544ffe"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ConsoleService
            m_ConsoleService = asset.FindActionMap("ConsoleService", throwIfNotFound: true);
            m_ConsoleService_OpenConsole = m_ConsoleService.FindAction("OpenConsole", throwIfNotFound: true);
        }

        ~@ConsoleInput()
        {
            UnityEngine.Debug.Assert(!m_ConsoleService.enabled, "This will cause a leak and performance issues, ConsoleInput.ConsoleService.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ConsoleService
        private readonly InputActionMap m_ConsoleService;
        private List<IConsoleServiceActions> m_ConsoleServiceActionsCallbackInterfaces = new List<IConsoleServiceActions>();
        private readonly InputAction m_ConsoleService_OpenConsole;
        public struct ConsoleServiceActions
        {
            private @ConsoleInput m_Wrapper;
            public ConsoleServiceActions(@ConsoleInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenConsole => m_Wrapper.m_ConsoleService_OpenConsole;
            public InputActionMap Get() { return m_Wrapper.m_ConsoleService; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConsoleServiceActions set) { return set.Get(); }
            public void AddCallbacks(IConsoleServiceActions instance)
            {
                if (instance == null || m_Wrapper.m_ConsoleServiceActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ConsoleServiceActionsCallbackInterfaces.Add(instance);
                @OpenConsole.started += instance.OnOpenConsole;
                @OpenConsole.performed += instance.OnOpenConsole;
                @OpenConsole.canceled += instance.OnOpenConsole;
            }

            private void UnregisterCallbacks(IConsoleServiceActions instance)
            {
                @OpenConsole.started -= instance.OnOpenConsole;
                @OpenConsole.performed -= instance.OnOpenConsole;
                @OpenConsole.canceled -= instance.OnOpenConsole;
            }

            public void RemoveCallbacks(IConsoleServiceActions instance)
            {
                if (m_Wrapper.m_ConsoleServiceActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IConsoleServiceActions instance)
            {
                foreach (var item in m_Wrapper.m_ConsoleServiceActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ConsoleServiceActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ConsoleServiceActions @ConsoleService => new ConsoleServiceActions(this);
        public interface IConsoleServiceActions
        {
            void OnOpenConsole(InputAction.CallbackContext context);
        }
    }
}
